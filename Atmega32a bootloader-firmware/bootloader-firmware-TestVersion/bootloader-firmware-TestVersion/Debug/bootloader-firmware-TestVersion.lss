
bootloader-firmware-TestVersion.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000023e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000856  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000649  00000000  00000000  00000b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c0  00000000  00000000  00001193  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001554  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bc  00000000  00000000  000015d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003b5  00000000  00000000  00001994  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001d49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  64:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <uart_init>:
#define BAUD 9600
#define MYUBRR F_CPU/16/BAUD-1
#define LOOP_BUFFER_SIZE 64

void uart_init(unsigned int ubrr) {
	UBRRH = (unsigned char)(ubrr>>8);
  6c:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)ubrr;
  6e:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN)|(1<<TXEN);
  70:	88 e1       	ldi	r24, 0x18	; 24
  72:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  74:	86 e8       	ldi	r24, 0x86	; 134
  76:	80 bd       	out	0x20, r24	; 32
  78:	08 95       	ret

0000007a <uart_receive>:
}

unsigned char uart_receive(void) {
	while (!(UCSRA & (1<<RXC)));
  7a:	5f 9b       	sbis	0x0b, 7	; 11
  7c:	fe cf       	rjmp	.-4      	; 0x7a <uart_receive>
	return UDR;
  7e:	8c b1       	in	r24, 0x0c	; 12
}
  80:	08 95       	ret

00000082 <led_on>:

void led_on() {
	PORTB |= (1 << PB0);
  82:	c0 9a       	sbi	0x18, 0	; 24
  84:	08 95       	ret

00000086 <led_off>:
}

void led_off() {
	PORTB &= ~(1 << PB0);
  86:	c0 98       	cbi	0x18, 0	; 24
  88:	08 95       	ret

0000008a <wait_ms>:
}

void wait_ms(uint16_t ms) {
	while (ms--) _delay_ms(1);
  8a:	00 97       	sbiw	r24, 0x00	; 0
  8c:	41 f0       	breq	.+16     	; 0x9e <wait_ms+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	e9 ef       	ldi	r30, 0xF9	; 249
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <wait_ms+0x8>
  96:	00 c0       	rjmp	.+0      	; 0x98 <wait_ms+0xe>
  98:	00 00       	nop
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	c1 f7       	brne	.-16     	; 0x8e <wait_ms+0x4>
  9e:	08 95       	ret

000000a0 <main>:
}

int main(void) {
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
  a8:	c0 54       	subi	r28, 0x40	; 64
  aa:	d1 09       	sbc	r29, r1
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	f8 94       	cli
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	cd bf       	out	0x3d, r28	; 61
	DDRB |= (1 << PB0); // Set PB0 as output
  b6:	b8 9a       	sbi	0x17, 0	; 23
	uart_init(MYUBRR);
  b8:	85 e0       	ldi	r24, 0x05	; 5
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 36 00 	call	0x6c	; 0x6c <uart_init>

	while (1) {
		uint8_t cmd = uart_receive();
  c0:	0e 94 3d 00 	call	0x7a	; 0x7a <uart_receive>

		if (cmd == 0x01) {
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	19 f4       	brne	.+6      	; 0xce <main+0x2e>
			led_on();
  c8:	0e 94 41 00 	call	0x82	; 0x82 <led_on>
  cc:	f9 cf       	rjmp	.-14     	; 0xc0 <main+0x20>
			} else if (cmd == 0x02) {
  ce:	82 30       	cpi	r24, 0x02	; 2
  d0:	19 f4       	brne	.+6      	; 0xd8 <main+0x38>
			led_off();
  d2:	0e 94 43 00 	call	0x86	; 0x86 <led_off>
  d6:	f4 cf       	rjmp	.-24     	; 0xc0 <main+0x20>
			} else if (cmd == 0x03) {
  d8:	83 30       	cpi	r24, 0x03	; 3
  da:	69 f4       	brne	.+26     	; 0xf6 <main+0x56>
			uint8_t low = uart_receive();
  dc:	0e 94 3d 00 	call	0x7a	; 0x7a <uart_receive>
  e0:	18 2f       	mov	r17, r24
			uint8_t high = uart_receive();
  e2:	0e 94 3d 00 	call	0x7a	; 0x7a <uart_receive>
			uint16_t ms = (high << 8) | low;
			wait_ms(ms);
  e6:	21 2f       	mov	r18, r17
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	a9 01       	movw	r20, r18
  ec:	58 2b       	or	r21, r24
  ee:	ca 01       	movw	r24, r20
  f0:	0e 94 45 00 	call	0x8a	; 0x8a <wait_ms>
  f4:	e5 cf       	rjmp	.-54     	; 0xc0 <main+0x20>
			} else if (cmd == 0x04) { // loop start
  f6:	84 30       	cpi	r24, 0x04	; 4
  f8:	19 f7       	brne	.-58     	; 0xc0 <main+0x20>
			uint8_t count = uart_receive();
  fa:	0e 94 3d 00 	call	0x7a	; 0x7a <uart_receive>
  fe:	d8 2e       	mov	r13, r24
			uint8_t loopBuffer[LOOP_BUFFER_SIZE];
			uint8_t index = 0;
 100:	f1 2c       	mov	r15, r1

			// Read until 0x05 (loop end)
			while (1) {
				uint8_t loopCmd = uart_receive();
 102:	0e 94 3d 00 	call	0x7a	; 0x7a <uart_receive>
				if (loopCmd == 0x05) break;
 106:	85 30       	cpi	r24, 0x05	; 5
 108:	81 f1       	breq	.+96     	; 0x16a <main+0xca>

				loopBuffer[index++] = loopCmd;
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	9f 0d       	add	r25, r15
 10e:	e1 e0       	ldi	r30, 0x01	; 1
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	ec 0f       	add	r30, r28
 114:	fd 1f       	adc	r31, r29
 116:	ef 0d       	add	r30, r15
 118:	f1 1d       	adc	r31, r1
 11a:	80 83       	st	Z, r24

				// If it's a delay, read 2 extra bytes
				if (loopCmd == 0x03 && index + 2 < LOOP_BUFFER_SIZE) {
 11c:	83 30       	cpi	r24, 0x03	; 3
 11e:	f9 f4       	brne	.+62     	; 0x15e <main+0xbe>
 120:	09 2f       	mov	r16, r25
 122:	10 e0       	ldi	r17, 0x00	; 0
 124:	98 01       	movw	r18, r16
 126:	2e 5f       	subi	r18, 0xFE	; 254
 128:	3f 4f       	sbci	r19, 0xFF	; 255
 12a:	20 34       	cpi	r18, 0x40	; 64
 12c:	31 05       	cpc	r19, r1
 12e:	cc f4       	brge	.+50     	; 0x162 <main+0xc2>
					loopBuffer[index++] = uart_receive();
 130:	0e 94 3d 00 	call	0x7a	; 0x7a <uart_receive>
 134:	e1 e0       	ldi	r30, 0x01	; 1
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	ec 0f       	add	r30, r28
 13a:	fd 1f       	adc	r31, r29
 13c:	e0 0f       	add	r30, r16
 13e:	f1 1f       	adc	r31, r17
 140:	80 83       	st	Z, r24
					loopBuffer[index++] = uart_receive();
 142:	0e 94 3d 00 	call	0x7a	; 0x7a <uart_receive>
 146:	92 e0       	ldi	r25, 0x02	; 2
 148:	9f 0d       	add	r25, r15
 14a:	e1 e0       	ldi	r30, 0x01	; 1
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	ec 0f       	add	r30, r28
 150:	fd 1f       	adc	r31, r29
 152:	e9 0f       	add	r30, r25
 154:	f1 1d       	adc	r31, r1
 156:	53 e0       	ldi	r21, 0x03	; 3
 158:	f5 0e       	add	r15, r21
 15a:	80 83       	st	Z, r24
 15c:	03 c0       	rjmp	.+6      	; 0x164 <main+0xc4>
			// Read until 0x05 (loop end)
			while (1) {
				uint8_t loopCmd = uart_receive();
				if (loopCmd == 0x05) break;

				loopBuffer[index++] = loopCmd;
 15e:	f9 2e       	mov	r15, r25
 160:	01 c0       	rjmp	.+2      	; 0x164 <main+0xc4>
 162:	f9 2e       	mov	r15, r25
					loopBuffer[index++] = uart_receive();
					loopBuffer[index++] = uart_receive();
				}

				// Prevent buffer overflow
				if (index >= LOOP_BUFFER_SIZE) break;
 164:	8f e3       	ldi	r24, 0x3F	; 63
 166:	8f 15       	cp	r24, r15
 168:	60 f6       	brcc	.-104    	; 0x102 <main+0x62>
			}

			// Execute loop block
			for (uint8_t i = 0; i < count; i++) {
 16a:	d1 10       	cpse	r13, r1
 16c:	38 c0       	rjmp	.+112    	; 0x1de <main+0x13e>
 16e:	a8 cf       	rjmp	.-176    	; 0xc0 <main+0x20>
				uint8_t j = 0;
				while (j < index) {
 170:	10 e0       	ldi	r17, 0x00	; 0
					uint8_t loopCmd = loopBuffer[j++];
 172:	01 e0       	ldi	r16, 0x01	; 1
 174:	01 0f       	add	r16, r17
 176:	e1 e0       	ldi	r30, 0x01	; 1
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	ec 0f       	add	r30, r28
 17c:	fd 1f       	adc	r31, r29
 17e:	e1 0f       	add	r30, r17
 180:	f1 1d       	adc	r31, r1
 182:	80 81       	ld	r24, Z
					if (loopCmd == 0x01) {
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	21 f4       	brne	.+8      	; 0x190 <main+0xf0>
						led_on();
 188:	0e 94 41 00 	call	0x82	; 0x82 <led_on>

			// Execute loop block
			for (uint8_t i = 0; i < count; i++) {
				uint8_t j = 0;
				while (j < index) {
					uint8_t loopCmd = loopBuffer[j++];
 18c:	10 2f       	mov	r17, r16
 18e:	21 c0       	rjmp	.+66     	; 0x1d2 <main+0x132>
					if (loopCmd == 0x01) {
						led_on();
						} else if (loopCmd == 0x02) {
 190:	82 30       	cpi	r24, 0x02	; 2
 192:	21 f4       	brne	.+8      	; 0x19c <main+0xfc>
						led_off();
 194:	0e 94 43 00 	call	0x86	; 0x86 <led_off>

			// Execute loop block
			for (uint8_t i = 0; i < count; i++) {
				uint8_t j = 0;
				while (j < index) {
					uint8_t loopCmd = loopBuffer[j++];
 198:	10 2f       	mov	r17, r16
 19a:	1b c0       	rjmp	.+54     	; 0x1d2 <main+0x132>
					if (loopCmd == 0x01) {
						led_on();
						} else if (loopCmd == 0x02) {
						led_off();
						} else if (loopCmd == 0x03) {
 19c:	83 30       	cpi	r24, 0x03	; 3
 19e:	c1 f4       	brne	.+48     	; 0x1d0 <main+0x130>
						uint8_t low = loopBuffer[j++];
						uint8_t high = loopBuffer[j++];
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	81 0f       	add	r24, r17
 1a4:	e1 e0       	ldi	r30, 0x01	; 1
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	ec 0f       	add	r30, r28
 1aa:	fd 1f       	adc	r31, r29
 1ac:	e8 0f       	add	r30, r24
 1ae:	f1 1d       	adc	r31, r1
 1b0:	1d 5f       	subi	r17, 0xFD	; 253
						uint16_t ms = (high << 8) | low;
						wait_ms(ms);
 1b2:	80 81       	ld	r24, Z
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	98 2f       	mov	r25, r24
 1b8:	88 27       	eor	r24, r24
					if (loopCmd == 0x01) {
						led_on();
						} else if (loopCmd == 0x02) {
						led_off();
						} else if (loopCmd == 0x03) {
						uint8_t low = loopBuffer[j++];
 1ba:	e1 e0       	ldi	r30, 0x01	; 1
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	ec 0f       	add	r30, r28
 1c0:	fd 1f       	adc	r31, r29
 1c2:	e0 0f       	add	r30, r16
 1c4:	f1 1d       	adc	r31, r1
						uint8_t high = loopBuffer[j++];
						uint16_t ms = (high << 8) | low;
						wait_ms(ms);
 1c6:	20 81       	ld	r18, Z
 1c8:	82 2b       	or	r24, r18
 1ca:	0e 94 45 00 	call	0x8a	; 0x8a <wait_ms>
 1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <main+0x132>

			// Execute loop block
			for (uint8_t i = 0; i < count; i++) {
				uint8_t j = 0;
				while (j < index) {
					uint8_t loopCmd = loopBuffer[j++];
 1d0:	10 2f       	mov	r17, r16
			}

			// Execute loop block
			for (uint8_t i = 0; i < count; i++) {
				uint8_t j = 0;
				while (j < index) {
 1d2:	1f 15       	cp	r17, r15
 1d4:	70 f2       	brcs	.-100    	; 0x172 <main+0xd2>
				// Prevent buffer overflow
				if (index >= LOOP_BUFFER_SIZE) break;
			}

			// Execute loop block
			for (uint8_t i = 0; i < count; i++) {
 1d6:	e3 94       	inc	r14
 1d8:	de 10       	cpse	r13, r14
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <main+0x140>
 1dc:	71 cf       	rjmp	.-286    	; 0xc0 <main+0x20>
 1de:	e1 2c       	mov	r14, r1
				uint8_t j = 0;
				while (j < index) {
 1e0:	f1 10       	cpse	r15, r1
 1e2:	c6 cf       	rjmp	.-116    	; 0x170 <main+0xd0>
 1e4:	f8 cf       	rjmp	.-16     	; 0x1d6 <main+0x136>

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
